/* { } */
* {
  /* Resetar as configurações de espaçamento */
  margin: 0; /* Espaçamento externo */
  padding: 0; /* Espaçamento interno */
  box-sizing: border-box; /* Preserva o tamanho do que está internamente - Exemplo complicado das caixas lá. */
}

:root{ /* Definindo que o tamanho padrão da fonte é de 16px */
/* A partir disso, quando colocamos "px" para definir o tamanho de uma fonte, ela substituirá esses 16px, pelo valor colocado */
/* Tudo que eu fiz, eu fiz em "px", mas depois que coloquei esse referencial, devo mudar de "px", para "rem" (rem, é uma unidade de medida proporcional ao referencial)*/
/* root = raiz do código */
  font-size: 16px;
}

/* Customização da scroll bar */
::-webkit-scrollbar{ 
  width: 8px;
}

::-webkit-scrollbar-track{ 
  background-color: #2c2c31;
}

::-webkit-scrollbar-thumb{ 
  background-color: #9e9ea0;
}

/* Keyframe é uma animação gradual que ocorre na pagina */
/* depois, colocamos essa animação dentro de um elemento */
@keyframes entering{/* podemos determinar uma porcentagem, e a cada indicação, a animação vai acontecendo. Ex
    0% { background color: azul}
    50% { background color: verde }
    100% { background color: vermelho} */
/* No caso, utilizamos "from" (de) e "to" (para), e ai a animação se distribui pelo tempo especificado no elemento que recebeu a animação */
  from{
    opacity: 0;
    transform: translateY(-100px);
   }
   to {
    opacity: 1;
    transform: translateY(0)
    }

}

body {
  background-color: #121215;
  color: #eaeaea;
  font-family: 'Roboto', sans-serif;
/* Abaixo, uma forma de colocar o conteúdo da tela em forma de colunas, como se estivéssemos separando em dois */
  display: grid; /* "grade" */
  grid-template-areas: "profile timeline"; /* Os nomes das duas áreas, separados por um espaço */
  grid-template-columns: 1fr 1fr;/* Formato da divisão = colunas... Tamanho 1 fração e 1 fração = divide em dois */
  grid-template-rows: 100vh;/* Formato da divisão = linhas... Altura = 100vh (ou 100% da tela, flexível) */
}

nav {
  padding: 64px;
  grid-area: timeline;/* informando qual é o grid */
  overflow-y: scroll;/* Quando o conteúdo não couber na vertical (eixo y), o scroll da tela vai acontecer só do lado que precisa, do outro que é fixo, não vai descer  */
  animation: entering 3s ease-in-out;/* Adicionei a animação (animation), indiquei qual é a animação (entering) e determinei o tempo (10s) */
}

.memory{
  display: flex;
  flex-direction: column;
  gap: 16px;/* Espaço entre elementos */
  text-decoration: none;
  margin-bottom: 64px;
}

.memory small {
  /* Colocando a tag na frente, evidenciamos que somente as tags "small", dentro do elemento da class "memory", deverão ser afetadas */
  color: #bebebf;
  font-size: 0.75rem;
/* Eu tinha colocado 12px antes */
/* 0.75 rem, é o mesmo que 12px, isto é, 12px corresponde a 75% do nosso referencial (16px)*/
/* Para saber quantos rems, voce pega o pixel e divide pelo referencial -- 12px/16px=0.75 */
/* Daqui pra baixo, todas as dimensões de fonte, utilizarão esta lógica */
}

.memory h1 {
  font-size: 2rem;
  color: #eaeaea
}

.memory p{
  color:#eaeaea
}/* Eu tive que adicionar por conta, no vídeo o dele dá certo sem isso */

.memory img {
  width: 100%;
  height: 280px;
  object-fit: cover; /* Conforme você amplia a página, ela mantém a dimensão de uma "capa"
  (do Youtube, por ex.) */
  border-radius: 8px;
/* Como é a imagem que vai receber uma transição, adicionamos essa transição aqui no img, referenciando o elemento "transform", que está abaixo, pois esse é o elemento responsável */
  transition: transform 0.3s ease-in-out;

}

/* Efeito de zoom: */
.memory:hover img{ /* hover = quando passar o mouse em cima */
  transform: scale(1.1);/* aumenta o tamanho em escala, "1" é o tamanho normal ".1" = 10% */
}

/* Quando a imagem der zoom, ela não vai expandir a "janela", ela vai dar um zoom, dentro da própria imagem, não invadindo nenhum campo */
.memory div{
  width: 100%;
  height: 280px;
  overflow: hidden;/* Esse é o efeito do zoom */
  border-radius: 8px;
}


.memory img {
  font-size: 1.5rem;
  color: #bebebf;
  line-height: 28px; /* Espaçamento de uma linha para a outra */
}

aside{
  grid-area: profile;/* informando qual é o grid */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-right: 1px solid;
  border-image: linear-gradient(#727275, #2c2c31) 1;
  gap: 20px;/* elementos se afastam */
  background-image: url("./assets/background.svg");/* colocar imagem no plano de fundo */
  /* a minha imagem se alinhou corretamente, mas o professor precisou ajusta-la, ajuste abaixo */
  background-position: top right;/* se alinha ao topo e a direita */
  background-repeat: no-repeat;/* a imagem é continua em toda a area */
  background-size: auto 100%;/* ajuste da imagem */
  animation: entering 0.7s ease-in-out;
}

aside *{/* Insere a animação dentro de todos os elementos do aside */
/* Eu não vi diferença, mas o professor passou */
  animation: entering 0.7s ease-in-out;
}

aside img:nth-child(1){
  width: 100px;
}

aside img:nth-child(2){/* Seleciona a segunda (2) imagem dentro do <aside> */
  width: 160px;
  height: 160px;
  /*object-fit: cover;  */
  /* quando a imagem é retangular, da pra usar object-fit para ajustar sem perder proporção */
  /* no caso, eu usei uma imagem já recortada em quadrado */
  border: 4px solid transparent;
  background: linear-gradient(#d39e33 , #ed5636 , #633bbc) padding-box, linear-gradient(260deg,#d39e33 , #ed5636 , #633bbc) border-box;/* Efeito da borda, complexo */
}

aside p{
  font-size: 2rem;
  text-align: center;
}

aside span{
  font-size: 0.75rem;
  color: #9e9ea0;
}

/* Deixando a página responsiva à dispositivos móveis */
@media (max-width: 768px){ /* Até 768px, o que vai prevalecer, é o que estiver aqui... */
/* Agora, funciona como se tivéssemos outro css, utilizamos a mesma estrutura */
  body { 
    grid-template-columns: 1fr;
    grid-template-rows: 0.2fr 0.8fr;
    grid-template-areas: "profile" "timeline";
  }

  aside{ /* espaçamentos e bordas */
    border-right: none;
    padding: 32px 12px;
  }

  nav {
    overflow-y: visible; /* barra de rolagem geral para toda a pagina */
    padding: 22px;
   }
}
